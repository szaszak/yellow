# print(df_line$url)
gh_response <- GET(df_line$url)
# Resposta da query, já colapsada e transformada em dataframe
# Remover aviso de 'No encoding supplied: defaulting to UTF-8' na linha fromJSON()
suppressMessages(
response_text <-
# Ignorar aviso 'argument is not an atomic vector; coercing'
suppressWarnings(str_c(content(gh_response, 'text'), collapse = ", ")) %>%
# Concatenar toda a string de resultados
str_c("[", ., "]") %>%
# Transformar em dataframe
fromJSON() %>%
as.data.frame()
)
# Nos interessa a coluna de 'paths', como um novo dataframe
paths <- response_text$paths %>% as.data.frame()
i <- 1
i in seq(1, length(paths$details$osm_way_id))
seq(1, length(paths$details$osm_way_id))
# i <- 1
osm_ways <- paths$details$osm_way_id[i] %>% as.data.frame()
osm_ways
# Manter somente osm_ids e inserir número da rota alternativa
osm_ways <- osm_ways %>% select(osm_way_id = X3) %>% mutate(alt = i,
index = row_number(),
.before = 'osm_way_id')
osm_ways
paths
# Isolar colunas de interesse
paths <-
paths %>%
# Calcular tempo em segundos e velocidade média
mutate(time = time / 1000,
speed = distance / time * 3.6) %>%
# Descartar colunas extras - a coluna poly é o shape da rota traçada
select(distance, weight, time, speed, poly = points)
paths
# Adicionar colunas de informação vindas do dataframe original
paths <-
paths %>%
mutate(hex_id    = df_line$id,
alt       = row_number(),
# id_hex.x  = df_line$id_hex_x,
# id_hex.y  = df_line$id_hex_y,
.before = 'distance') #%>%
paths
# carregar bibliotecas
source('fun/setup.R')
library('httr')
library('jsonlite')
# Estrutura de pastas
pasta_dados       <- "../../yellow_dados"
# dados_originais   <- sprintf("%s/00_dados_originais/IPEA", pasta_dados)
pasta_aop_rev     <- sprintf("%s/12_aop_revisitado", pasta_dados)
# pasta_aoprev_hex  <- sprintf("%s/01_hexagonos_26_vizinhos", pasta_aop_rev)
pasta_aoprv_alter <- sprintf("%s/03_aop_alternatives_2019_2028", pasta_aop_rev)
pasta_ids_aopt_19 <- sprintf("%s/A_2019_osm_way_ids_aop", pasta_aoprv_alter)
pasta_rts_aopt_19 <- sprintf("%s/B_2019_rotas_modeladas_alternatives", pasta_aoprv_alter)
dir.create(pasta_ids_aopt_19, recursive = TRUE, showWarnings = FALSE)
dir.create(pasta_rts_aopt_19, recursive = TRUE, showWarnings = FALSE)
library('arrow')
# Estrutura de pastas
pasta_dados       <- "../../yellow_dados"
# dados_originais   <- sprintf("%s/00_dados_originais/IPEA", pasta_dados)
pasta_aop_rev     <- sprintf("%s/12_aop_revisitado", pasta_dados)
# pasta_aoprev_hex  <- sprintf("%s/01_hexagonos_26_vizinhos", pasta_aop_rev)
pasta_aoprv_alter <- sprintf("%s/03_aop_alternatives_2019_2028", pasta_aop_rev)
pasta_ids_aopt_19 <- sprintf("%s/A_2019_osm_way_ids_aop", pasta_aoprv_alter)
pasta_rts_aopt_19 <- sprintf("%s/B_2019_rotas_modeladas_alternatives", pasta_aoprv_alter)
# Arquivos a processar
arqs <- list.files(pasta_aoprv_alter, pattern = '^tmp_base_para_routing_res09_26vizinhos_[0-9]{3}.csv', full.names = TRUE)
arqs
# Arquivos já processados
ids_processados <- sprintf('%s/tmp_00_ids_processados.csv', pasta_aoprv_alter)
arq <- arqs[1]
# arq <- arqs[1]
print(arq)
# Abrir base para routing com 26 vizinhos, manter só id e url
hex_com_vizinhos <- read_delim(arq, delim = ';', col_types = cols(.default = "c"))
# Checar quais resultados já foram rodados - abrir lista, puxar ids e remover
# do dataframe hex_com_vizinhos se houver
# library('tidylog')
if (file.exists(ids_processados)) {
arqs_resultados <- read_delim(ids_processados, delim = ';', col_types = "c")
hex_com_vizinhos <- hex_com_vizinhos %>% filter(!id %in% arqs_resultados$id)
rm(arqs_resultados)
nrow(hex_com_vizinhos)
}
hex_id <- hex_com_vizinhos %>% head(1) %>% select(id) %>% pull()
# hex_id <- '89a81046b2fffff-89a81044d8fffff'
# hex_id <- hex_com_vizinhos %>% head(1) %>% select(id) %>% pull()
df_line <- hex_com_vizinhos %>% filter(id == hex_id)
df_line
# Fazer a GET de roteamento no Grahphopper
# print(df_line$url)
gh_response <- GET(df_line$url)
# Resposta da query, já colapsada e transformada em dataframe
# Remover aviso de 'No encoding supplied: defaulting to UTF-8' na linha fromJSON()
suppressMessages(
response_text <-
# Ignorar aviso 'argument is not an atomic vector; coercing'
suppressWarnings(str_c(content(gh_response, 'text'), collapse = ", ")) %>%
# Concatenar toda a string de resultados
str_c("[", ., "]") %>%
# Transformar em dataframe
fromJSON() %>%
as.data.frame()
)
# Nos interessa a coluna de 'paths', como um novo dataframe
paths <- response_text$paths %>% as.data.frame()
paths
i <- 1
# i <- 1
osm_ways <- paths$details$osm_way_id[i] %>% as.data.frame()
osm_ways
hex_id
# Abrir base para routing com 26 vizinhos, manter só id e url
hex_com_vizinhos <- sprintf("%s/00_base_para_routing_res09_26vizinhos.csv", pasta_aoprv_alter)
hex_com_vizinhos <- read_delim(hex_com_vizinhos, delim = ';', col_types = cols(.default = "c"))
hex_com_vizinhos <- hex_com_vizinhos %>% select(id)
head(hex_com_vizinhos)
hex_com_vizinhos <- hex_com_vizinhos %>% separate(id, into = c('id1', 'id2'), sep = '-', remove = TRUE)
head(hex_com_vizinhos)
hex_com_vizinhos <- hex_com_vizinhos %>% select(id = id1) %>% distinct()
gc(T)
head(hex_com_vizinhos)
hex_com_vizinhos %>% filter(str_detect(id, '89a81([a-z0-9]{6})ffff'))
hex_com_vizinhos %>% filter(str_detect(id, '^89a81([a-z0-9]{6})ffff'))
hex_com_vizinhos %>% head() %>% mutate(id = str_replace(id, '^89a81([a-z0-9]{6})ffff', '\1') )
hex_com_vizinhos %>% head() %>% mutate(id = str_replace(id, '^89a81([a-z0-9]{6})ffff', '\\1') )
hex_com_vizinhos %>% head() %>% mutate(id = str_replace(id, '^89a81([a-z0-9]{6})ffff', '\\1') ) %>% distinct()
df_line
hex_id
str_replace(hex_id, '^89a81([a-z0-9]{6})ffff-89a81([a-z0-9]{6})ffff', '\\1-\\2')
hex_id
# Encurtar hex_id - todos aqui são '89a81' + 6 caracteres de dígito ou letra = 'ffff'
hex_id <- str_replace(hex_id, '^89a81([a-z0-9]{6})ffff-89a81([a-z0-9]{6})ffff', '\\1-\\2')
hex_id
# Fazer a GET de roteamento no Grahphopper
# print(df_line$url)
gh_response <- GET(df_line$url)
gh_response
# Resposta da query, já colapsada e transformada em dataframe
# Remover aviso de 'No encoding supplied: defaulting to UTF-8' na linha fromJSON()
suppressMessages(
response_text <-
# Ignorar aviso 'argument is not an atomic vector; coercing'
suppressWarnings(str_c(content(gh_response, 'text'), collapse = ", ")) %>%
# Concatenar toda a string de resultados
str_c("[", ., "]") %>%
# Transformar em dataframe
fromJSON() %>%
as.data.frame()
)
# Nos interessa a coluna de 'paths', como um novo dataframe
paths <- response_text$paths %>% as.data.frame()
paths
i <- 1
# i <- 1
osm_ways <- paths$details$osm_way_id[i] %>% as.data.frame()
osm_ways
hex_id_short <- hex_id
hex_id_short
# Manter somente osm_ids e inserir número da rota alternativa
osm_ways <- osm_ways %>% select(osm_way_id = X3) %>% mutate(hex_id = hex_id_short,
alt = i,
index = row_number(),
.before = 'osm_way_id')
osm_ways
8192*26
8192^26
head(hex_com_vizinhos)
8192^27
8192*27
8192*25
8192*22
8192*23
hex_id_short
hex_id_base
hex_id_short
str_sub(hex_id_short, 6)
str_sub(hex_id_short, 1, 6)
# Encurtar hex_id - todos aqui são '89a81' + 6 caracteres de dígito ou letra = 'ffff'
hex_id_short <- str_replace(hex_id, '^89a81([a-z0-9]{6})ffff-89a81([a-z0-9]{6})ffff', '\\1-\\2')
hex_id_base  <- str_sub(hex_id_short, 1, 6)
hex_id_short
hex_id_base
osm_way_out <- sprintf('%s/%s.csv', pasta_ids_aopt_19, hex_id_base)
osm_way_out
# Estrutura de pastas
pasta_dados       <- "../../yellow_dados"
# dados_originais   <- sprintf("%s/00_dados_originais/IPEA", pasta_dados)
pasta_aop_rev     <- sprintf("%s/12_aop_revisitado", pasta_dados)
# pasta_aoprev_hex  <- sprintf("%s/01_hexagonos_26_vizinhos", pasta_aop_rev)
pasta_aoprv_alter <- sprintf("%s/03_aop_alternatives_2019_2028", pasta_aop_rev)
pasta_ids_aopt_19 <- sprintf("%s/A_2019_osm_way_ids_aop", pasta_aoprv_alter)
pasta_rts_aopt_19 <- sprintf("%s/B_2019_rotas_modeladas_alternatives", pasta_aoprv_alter)
dir.create(pasta_ids_aopt_19, recursive = TRUE, showWarnings = FALSE)
dir.create(pasta_rts_aopt_19, recursive = TRUE, showWarnings = FALSE)
paths
# Puxar osm_way_ids dos resultados de cada alternativa e gravar em pasta separada
for (i in seq(1, length(paths$details$osm_way_id))) {
# i <- 1
osm_ways <- paths$details$osm_way_id[i] %>% as.data.frame()
if (nrow(osm_ways) > 0) {
# Manter somente osm_ids e inserir número da rota alternativa
osm_ways <- osm_ways %>% select(osm_way_id = X3) %>% mutate(hex_id = hex_id_short,
alt = i,
index = row_number(),
.before = 'osm_way_id')
# Gravar resultados
osm_way_out <- sprintf('%s/%s.csv', pasta_ids_aopt_19, hex_id_base)
if (file.exists(osm_way_out)) {
write_delim(osm_ways, osm_way_out, delim = ';', append = TRUE)
} else {
write_delim(osm_ways, osm_way_out, delim = ';', append = FALSE)
}
} else {
# Se não há osm_way_ids, é porque os pontos estão muito próximos uns dos
# outros, mesmo que seja um osm_way_id diferente entre a origem e o
# destino. A distância e a velocidade calculadas vão ser zero também -
# pular este registro, que vai ser vazio
return(sprintf('Pulando: %s não tem osm_way_ids (provavelmente tem distância = 0)', hex_id))
}
}
# Isolar colunas de interesse
paths <-
paths %>%
# Calcular tempo em segundos e velocidade média
mutate(time = time / 1000,
speed = distance / time * 3.6) %>%
# Descartar colunas extras - a coluna poly é o shape da rota traçada
select(distance, weight, time, speed, poly = points)
# Adicionar colunas de informação vindas do dataframe original
paths <-
paths %>%
mutate(hex_id    = hex_id_short,
alt       = row_number(),
# id_hex.x  = df_line$id_hex_x,
# id_hex.y  = df_line$id_hex_y,
.before = 'distance') #%>%
paths
# Guardar resultados temporários
tmp_file <- sprintf('%s/%s_modalt.csv', pasta_rts_aopt_19, hex_id_base)
tmp_file
# Guardar resultados temporários
tmp_file <- sprintf('%s/%s_modalt.csv', pasta_rts_aopt_19, hex_id_base)
if (file.exists(osm_way_out)) {
write_delim(paths, tmp_file, delim = ';', append = TRUE)
} else {
write_delim(paths, tmp_file, delim = ';', append = FALSE)
}
if (file.exists(osm_way_out)) {
write_delim(paths, tmp_file, delim = ';', append = TRUE)
} else {
write_delim(paths, tmp_file, delim = ';', append = FALSE)
}
# Guardar ids já processados em arquivo próprio
df_line <- df_line %>% select(id)
df_line
# Estrutura de pastas
pasta_dados       <- "../../yellow_dados"
dados_originais   <- sprintf("%s/00_dados_originais/IPEA", pasta_dados)
pasta_aop_rev     <- sprintf("%s/12_aop_revisitado", pasta_dados)
pasta_aoprev_hex  <- sprintf("%s/01_hexagonos_26_vizinhos", pasta_aop_rev)
pasta_aoprv_alter <- sprintf("%s/03_aop_alternatives_2019_2028", pasta_aop_rev)
dir.create(pasta_aoprv_alter, recursive = TRUE, showWarnings = FALSE)
out_file <- sprintf('%s/00_base_para_routing_res09_26vizinhos.csv', pasta_aoprv_alter)
hex_com_vizinhos <- read_delim(out_file, delim = ';', col_types = cols(.default = "c"))
# Dividir resultados em arquivos menores, para processamento
# out_file <- sprintf('%s/00_base_para_routing_res09_26vizinhos.csv', pasta_aoprv_alter)
# hex_com_vizinhos <- read_delim(out_file, delim = ';', col_types = cols(.default = "c"))
hex_com_vizinhos <- hex_com_vizinhos %>% select(id, url) %>% distinct()
# nrow(hex_com_vizinhos) # 10.911.566
head(hex_com_vizinhos)
# Definir intervalo que custe pouca memória do future
intervalo <- 100000
# Puxar valor de nrow(hex_com_vizinhos)
max_value <- nrow(hex_com_vizinhos)
# Abrir base hex_com_vizinhos e selecionar quantidade de linhas
# de acordo com intervalo, checar ids que já rodaram, fazer
# routing com future, limpar memória e reiniciar até terminar
counter <- 1
for (i in seq(1, max_value, intervalo)) {
# i <- 1;
# Se valor máximo pelo intervalo for maior que dataframe,
# considerar tamanho do dataframe como máximo
interval_max <- i + intervalo - 1
if (interval_max > max_value) { interval_max <- max_value }
print(sprintf('%i - %i', i, interval_max))
# Puxar só linhas correspondentes ao intervalo
out_hex <- hex_com_vizinhos %>% slice(i:interval_max)
# Gravar arquivo temporário
out_file <- sprintf('%s/tmp_base_para_routing_res09_26vizinhos_%s.csv', pasta_aoprv_alter, str_pad(counter, 3, pad = '0'))
write_delim(out_hex, out_file, delim = ';')
# Atualizar counter
counter <- counter + 1
}
library('tidyverse', warn.conflicts = FALSE)
library('tidylog', warn.conflicts = FALSE)
library('arrow')
# Estrutura de pastas
pasta_dados       <- "../../yellow_dados"
# dados_originais   <- sprintf("%s/00_dados_originais/IPEA", pasta_dados)
pasta_aop_rev     <- sprintf("%s/12_aop_revisitado", pasta_dados)
# pasta_aoprev_hex  <- sprintf("%s/01_hexagonos_26_vizinhos", pasta_aop_rev)
pasta_aoprv_alter <- sprintf("%s/03_aop_alternatives_2019_2028", pasta_aop_rev)
pasta_ids_aopt_19 <- sprintf("%s/A_2019_osm_way_ids_aop", pasta_aoprv_alter)
pasta_rts_aopt_19 <- sprintf("%s/B_2019_rotas_modeladas_alternatives", pasta_aoprv_alter)
this <- data.frame(arq = list.files(pasta_rts_aopt_19, recursive = FALSE, full.names = FALSE))
this
this <- data.frame(arq = list.files(pasta_rts_aopt_19, recursive = FALSE, full.names = TRUE))
this
?map_df
that <- map_df(this, read_delim, delim = ';', col_types = cols(.default = "c"))
head(that)
out_file <- sprintf('%s/teste.parquet', pasta_aoprv_alter)
write_parquet(that, out_file)
that <- map_df(this, read_delim, delim = ';', col_types = 'ciddddc')
out_file <- sprintf('%s/teste2.parquet', pasta_aoprv_alter)
write_parquet(that, out_file)
library('tidyverse', warn.conflicts = FALSE)
library('tidylog', warn.conflicts = FALSE)
library('arrow')
# Estrutura de pastas
pasta_dados       <- "../../yellow_dados"
# dados_originais   <- sprintf("%s/00_dados_originais/IPEA", pasta_dados)
pasta_aop_rev     <- sprintf("%s/12_aop_revisitado", pasta_dados)
# pasta_aoprev_hex  <- sprintf("%s/01_hexagonos_26_vizinhos", pasta_aop_rev)
pasta_aoprv_alter <- sprintf("%s/03_aop_alternatives_2019_2028", pasta_aop_rev)
pasta_ids_aopt_19 <- sprintf("%s/A_2019_osm_way_ids_aop", pasta_aoprv_alter)
pasta_rts_aopt_19 <- sprintf("%s/B_2019_rotas_modeladas_alternatives", pasta_aoprv_alter)
alternatives <- data.frame(arq = list.files(pasta_rts_aopt_19, recursive = FALSE, full.names = TRUE))
# carregar bibliotecas
source('fun/setup.R')
library('httr')
library('jsonlite')
library('arrow')
# Estrutura de pastas
pasta_dados       <- "../../yellow_dados"
# dados_originais   <- sprintf("%s/00_dados_originais/IPEA", pasta_dados)
pasta_aop_rev     <- sprintf("%s/12_aop_revisitado", pasta_dados)
# pasta_aoprev_hex  <- sprintf("%s/01_hexagonos_26_vizinhos", pasta_aop_rev)
pasta_aoprv_alter <- sprintf("%s/03_aop_alternatives_2019_2028", pasta_aop_rev)
pasta_ids_aopt_19 <- sprintf("%s/A_2019_osm_way_ids_aop", pasta_aoprv_alter)
pasta_rts_aopt_19 <- sprintf("%s/B_2019_rotas_modeladas_alternatives", pasta_aoprv_alter)
dir.create(pasta_ids_aopt_19, recursive = TRUE, showWarnings = FALSE)
dir.create(pasta_rts_aopt_19, recursive = TRUE, showWarnings = FALSE)
# Abrir base para routing com 26 vizinhos, manter só id e url
hex_com_vizinhos <- sprintf("%s/00_base_para_routing_res09_26vizinhos.csv", pasta_aoprv_alter)
hex_com_vizinhos <- read_delim(hex_com_vizinhos, delim = ';', col_types = cols(.default = "c"))
hex_com_vizinhos <- hex_com_vizinhos %>% select(id, url)
head(hex_com_vizinhos)
# Checar quais resultados já foram rodados - abrir lista, puxar ids e remover
# do dataframe hex_com_vizinhos se houver
# library('tidylog')
arqs_resultados <- data.frame(arq = list.files(pasta_rts_aopt_19, recursive = FALSE, full.names = FALSE))
ids_ok <- hex_com_vizinhos %>% separate(id, into = c('id1', 'id2'), sep = '-', remove = TRUE)
head(ids_ok)
ids_ok <- ids_ok %>% select(id = id1) %>% distinct()
head(ids_ok)
arqs_resultados
arqs_resultados <- arqs_resultados %>% mutate(hex_id = str_replace(arq, '_modalt.csv', ''))
arqs_resultados
arqs_resultados <- arqs_resultados %>% select(hex_id)
arqs_resultados
arqs_resultados %>% head() %>% mutate(hex_id = str_c('89a81', hex_id, 'ffff'))
arqs_resultados <- arqs_resultados %>% mutate(hex_id = str_c('89a81', hex_id, 'ffff'))
ids_ok
arqs_resultados
ids_ok %>% filter(!id %in% arqs_resultados$hex_id)
arqs_resultados <- data.frame(arq = list.files(pasta_ids_aopt_19, recursive = FALSE, full.names = FALSE))
arqs_resultados
arqs_resultados <- arqs_resultados %>% mutate(hex_id = str_replace(arq, '.csv', ''))
arqs_resultados
arqs_resultados <- arqs_resultados %>% select(hex_id)
arqs_resultados
arqs_resultados <- arqs_resultados %>% mutate(hex_id = str_c('89a81', hex_id, 'ffff'))
arqs_resultados
ids_ok %>% filter(!id %in% arqs_resultados$hex_id)
gc(T)
library('tidyverse', warn.conflicts = FALSE)
library('tidylog', warn.conflicts = FALSE)
library('arrow')
# Estrutura de pastas
pasta_dados       <- "../../yellow_dados"
# dados_originais   <- sprintf("%s/00_dados_originais/IPEA", pasta_dados)
pasta_aop_rev     <- sprintf("%s/12_aop_revisitado", pasta_dados)
# pasta_aoprev_hex  <- sprintf("%s/01_hexagonos_26_vizinhos", pasta_aop_rev)
pasta_aoprv_alter <- sprintf("%s/03_aop_alternatives_2019_2028", pasta_aop_rev)
pasta_ids_aopt_19 <- sprintf("%s/A_2019_osm_way_ids_aop", pasta_aoprv_alter)
pasta_rts_aopt_19 <- sprintf("%s/B_2019_rotas_modeladas_alternatives", pasta_aoprv_alter)
# ------------------------------------------------------------------------------
# Puxar resultados do routing - viagens até 40 minutos
# ------------------------------------------------------------------------------
# Arquivos com as rotas resultantes do routing pelo graphhopper
alternatives <- data.frame(arq = list.files(pasta_rts_aopt_19,
pattern = '_modalt.csv',
recursive = FALSE,
full.names = TRUE))
# Definir arquivo de saída
out_file <- sprintf('%s/01_base_alternatives_2019_res09_40min.csv', pasta_aoprv_alter)
out_file <- sprintf('/media/livre/SSD120GB/01_base_alternatives_2019_res09_40min.csv', pasta_aoprv_alter)
# Puxar as viagens com tempo menor ou igual ao limite
detach("package:tidylog")
for (alter in alternatives$arq) {
# alter <- alternatives$arq[1]
trips_aop <- read_delim(alter, delim = ';', col_types = 'ciddddc')
trips_aop <- trips_aop %>% filter(time <= 2400)
if (file.exists(out_file)) {
write_delim(trips_aop, out_file, delim = ';', append = TRUE)
} else {
write_delim(trips_aop, out_file, delim = ';', append = FALSE)
}
}
# rm(trips_aop, alter)
#
#
# that <- read_delim(out_file, delim = ';', col_types = 'ciddddc')
# head(that)
#
# out_file2 <- sprintf('%s/teste.parquet', pasta_aoprv_alter)
# write_parquet(that, out_file2)
rm(trips_aop, alter, alternatives)
# rm(trips_aop, alter, alternatives)
#
#
that <- read_delim(out_file, delim = ';', col_types = 'ciddddc')
# head(that)
#
out_file2 <- sprintf('%s/teste.parquet', pasta_aoprv_alter)
write_parquet(that, out_file2)
out_file2 <- '/media/livre/SSD120GB/teste.parquet'
write_parquet(that, out_file2)
head(that)
that %>% group_by(hex_id) %>% tally() %>% filter(n > 1)
that <- that %>% distinct()
that %>% filter(hex_id == '000003-00002b')
that %>% group_by(hex_id, alt) %>% tally() %>% filter(n > 1)
# carregar bibliotecas
source('fun/setup.R')
# Estrutura de pastas
pasta_dados       <- "../../yellow_dados"
dados_originais   <- sprintf("%s/00_dados_originais/IPEA", pasta_dados)
pasta_aop_rev     <- sprintf("%s/12_aop_revisitado", pasta_dados)
pasta_aoprev_hex  <- sprintf("%s/01_hexagonos_26_vizinhos", pasta_aop_rev)
pasta_aoprv_alter <- sprintf("%s/03_aop_alternatives_2019_2028", pasta_aop_rev)
out_file <- sprintf('%s/00_base_para_routing_res09_26vizinhos.csv', pasta_aoprv_alter)
hex_com_vizinhos <- read_delim(out_file, delim = ';', col_types = cols(.default = "c"))
# Dividir resultados em arquivos menores, para processamento
# out_file <- sprintf('%s/00_base_para_routing_res09_26vizinhos.csv', pasta_aoprv_alter)
# hex_com_vizinhos <- read_delim(out_file, delim = ';', col_types = cols(.default = "c"))
hex_com_vizinhos <- hex_com_vizinhos %>% select(id, url)
# nrow(hex_com_vizinhos) # 10.911.566
head(hex_com_vizinhos)
# Definir intervalo que custe pouca memória do future
intervalo <- 100000
# Puxar valor de nrow(hex_com_vizinhos)
max_value <- nrow(hex_com_vizinhos)
# Abrir base hex_com_vizinhos e selecionar quantidade de linhas
# de acordo com intervalo, checar ids que já rodaram, fazer
# routing com future, limpar memória e reiniciar até terminar
counter <- 1
for (i in seq(1, max_value, intervalo)) {
# i <- 1;
# Se valor máximo pelo intervalo for maior que dataframe,
# considerar tamanho do dataframe como máximo
interval_max <- i + intervalo - 1
if (interval_max > max_value) { interval_max <- max_value }
print(sprintf('%i - %i', i, interval_max))
# Puxar só linhas correspondentes ao intervalo
out_hex <- hex_com_vizinhos %>% slice(i:interval_max)
# Gravar arquivo temporário
out_file <- sprintf('%s/tmp_base_para_routing_res09_26vizinhos_%s.csv', pasta_aoprv_alter, str_pad(counter, 3, pad = '0'))
write_delim(out_hex, out_file, delim = ';')
# Atualizar counter
counter <- counter + 1
}
library('tidyverse', warn.conflicts = FALSE)
library('tidylog', warn.conflicts = FALSE)
library('arrow')
# Estrutura de pastas
pasta_dados       <- "../../yellow_dados"
# dados_originais   <- sprintf("%s/00_dados_originais/IPEA", pasta_dados)
pasta_aop_rev     <- sprintf("%s/12_aop_revisitado", pasta_dados)
# pasta_aoprev_hex  <- sprintf("%s/01_hexagonos_26_vizinhos", pasta_aop_rev)
pasta_aoprv_alter <- sprintf("%s/03_aop_alternatives_2019_2028", pasta_aop_rev)
pasta_ids_aopt_19 <- sprintf("%s/A_2019_osm_way_ids_aop", pasta_aoprv_alter)
# Abrir base para routing com 26 vizinhos, manter só id e url
hex_com_vizinhos <- sprintf("%s/00_base_para_routing_res09_26vizinhos.csv", pasta_aoprv_alter)
hex_com_vizinhos <- read_delim(hex_com_vizinhos, delim = ';', col_types = cols(.default = "c"))
hex_com_vizinhos <- hex_com_vizinhos %>% select(id, url)
head(hex_com_vizinhos)
# Separar ids para pegar só o primeiro
ids_ok <- hex_com_vizinhos %>% separate(id, into = c('id1', 'id2'), sep = '-', remove = TRUE)
ids_ok <- ids_ok %>% select(id = id1) %>% distinct()
head(ids_ok)
gc(T)
# arqs_resultados <- data.frame(arq = list.files(pasta_rts_aopt_19, recursive = FALSE, full.names = FALSE))
# arqs_resultados <- arqs_resultados %>% mutate(hex_id = str_replace(arq, '_modalt.csv', ''))
arqs_resultados <- data.frame(arq = list.files(pasta_ids_aopt_28, recursive = FALSE, full.names = FALSE))
pasta_ids_aopt_28 <- sprintf("%s/C_2028_osm_way_ids_aop", pasta_aoprv_alter)
pasta_rts_aopt_28 <- sprintf("%s/D_2028_rotas_modeladas_alternatives", pasta_aoprv_alter)
# arqs_resultados <- data.frame(arq = list.files(pasta_rts_aopt_19, recursive = FALSE, full.names = FALSE))
# arqs_resultados <- arqs_resultados %>% mutate(hex_id = str_replace(arq, '_modalt.csv', ''))
arqs_resultados <- data.frame(arq = list.files(pasta_ids_aopt_28, recursive = FALSE, full.names = FALSE))
arqs_resultados <- arqs_resultados %>% mutate(hex_id = str_replace(arq, '.csv', ''))
arqs_resultados <- arqs_resultados %>% select(hex_id)
arqs_resultados <- arqs_resultados %>% mutate(hex_id = str_c('89a81', hex_id, 'ffff'))
arqs_resultados
ids_ok %>% filter(!id %in% arqs_resultados$hex_id)
'89a81038bafffff' == '89a81038bafffff'
