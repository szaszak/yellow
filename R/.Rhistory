# qgis_id dessas linhas
altimetrias_sel <-
altimetrias %>%
filter(osm_id %in% resultados$edges.way_id) %>%
st_cast('POINT')
# Agora queremos os pontos de altimetria mais próximos aos pontos do map matching
alt_sel_ids <-
altimetrias_sel %>%
# select(osm_id, qgis_id) %>%
slice(st_nearest_feature(resultados, altimetrias_sel)) %>%
st_drop_geometry() %>%
select(qgis_id, length_m, elev_grad)
# # Para quais qgis_id o ciclista está se deslocando?
# id_to <-
#   alt_sel_ids %>%
#   distinct() %>%
#   # Puxar o próximo qgis_id da linha para uma columa - na última linha, em que
#   # é NA, vai virar um id igual ao da origem
#   mutate(qgis_id_2 = shift(qgis_id, type = 'lead'),
#          qgis_id_2 = case_when(is.na(qgis_id_2) ~ qgis_id,
#                                TRUE ~ qgis_id_2))
#
#
# alt_sel_ids <- alt_sel_ids %>% left_join(id_to, by = 'qgis_id')
#
#
# resultados <- resultados %>% cbind(alt_sel_ids)
# resultados %>% tail()
# Juntar pontos
resultados <- resultados %>% cbind(alt_sel_ids)
resultados %>% mapview(zcol = 'qgis_id')
resultados
resultados %>%
mutate(bearing = c(lwgeom::st_geod_azimuth(geometry),
units::set_units(NA, "radians")),
bearing2 = units::set_units(bearing, "degrees"))
resultados %>%
mutate(bearing = c(lwgeom::st_geod_azimuth(geometry),
units::set_units(NA, "radians")),
bearing = units::set_units(bearing, "degrees"))
resultados %>%
mutate(bearing = c(lwgeom::st_geod_azimuth(geometry),
units::set_units(NA, "radians")),
bearing = units::set_units(bearing, "degrees"),
bearing = round(bearing))
resultados %>%
st_drop_geomerty() %>%
mutate(bearing = c(lwgeom::st_geod_azimuth(geometry),
units::set_units(NA, "radians")),
bearing = units::set_units(bearing, "degrees"),
bearing = round(bearing))
resultados %>%
st_drop_geometry() %>%
mutate(bearing = c(lwgeom::st_geod_azimuth(geometry),
units::set_units(NA, "radians")),
bearing = units::set_units(bearing, "degrees"),
bearing = round(bearing))
resultados %>%
mutate(bearing = c(lwgeom::st_geod_azimuth(geometry),
units::set_units(NA, "radians")),
bearing = units::set_units(bearing, "degrees"),
bearing = round(bearing)) %>%
st_drop_geometry() %>%
altimetrias_sel <-
altimetrias_sel %>%
st_drop_geometry() %>%
select(qgis_id, length_m) %>%
distinct()
resultados %>%
mutate(bearing = c(lwgeom::st_geod_azimuth(geometry),
units::set_units(NA, "radians")),
bearing = units::set_units(bearing, "degrees"),
bearing = round(bearing)) %>%
st_drop_geometry()
resultados %>%
mutate(bearing = c(lwgeom::st_geod_azimuth(geometry),
units::set_units(NA, "radians")),
bearing = units::set_units(bearing, "degrees"),
bearing = round(bearing)) %>%
st_drop_geometry() %>%
select(edges.way_id, qgis_id, bearing)
resultados %>%
mutate(bearing = c(lwgeom::st_geod_azimuth(geometry),
units::set_units(NA, "radians")),
bearing = units::set_units(bearing, "degrees"),
bearing = round(bearing)) %>%
st_drop_geometry() %>%
select(edges.way_id, qgis_id, bearing) %>%
distinct()
resultados %>%
mutate(bearing = c(lwgeom::st_geod_azimuth(geometry),
units::set_units(NA, "radians")),
bearing = units::set_units(bearing, "degrees"),
bearing = round(bearing)) %>%
st_drop_geometry() %>%
select(edges.way_id, qgis_id, bearing) %>%
distinct(edges.way_id, qgis_id, .keep_all = TRUE)
resultados %>%
mutate(bearing = c(lwgeom::st_geod_azimuth(geometry),
units::set_units(NA, "radians")),
bearing = units::set_units(bearing, "degrees"),
bearing = round(bearing)) %>%
st_drop_geometry() %>%
select(edges.way_id, qgis_id, bearing) %>%
filter(!is.na(bearing)) %>%
distinct(edges.way_id, qgis_id, .keep_all = TRUE)
resultados %>%
mutate(bearing = c(lwgeom::st_geod_azimuth(geometry),
units::set_units(NA, "radians")),
bearing = units::set_units(bearing, "degrees"),
bearing = round(bearing)) %>%
st_drop_geometry() %>%
select(edges.way_id, qgis_id, bearing) %>%
filter(!is.na(bearing)) %>%
distinct(edges.way_id, qgis_id, .keep_all = TRUE) %>%
mutate(this = shift(bearing, type = 'lead'))
heading <-
resultados %>%
mutate(bearing = c(lwgeom::st_geod_azimuth(geometry),
units::set_units(NA, "radians")),
bearing = units::set_units(bearing, "degrees"),
bearing = round(bearing)) %>%
st_drop_geometry() %>%
select(edges.way_id, qgis_id, bearing) %>%
filter(!is.na(bearing)) %>%
distinct(edges.way_id, qgis_id, .keep_all = TRUE)
heading
for (i in heading) {
print(i)
}
for (i in heading %>% rowwise()) {
print(i)
}
?cumsum
heading %>%
mutate(heading = cumprod(bearing))
heading %>%
mutate(bearing = as.numeric(bearing),
heading = cumprod(bearing))
heading %>%
mutate(bearing = drop_unity(bearing),
heading = cumprod(bearing))
heading %>%
mutate(bearing = units::drop_unity(bearing),
heading = cumprod(bearing))
heading %>%
mutate(bearing = units::drop_units(bearing),
heading = cumprod(bearing))
heading$bearing
units::drop_units(heading$bearing)
heading %>%
mutate(bearing = units::drop_units(bearing)) %>%
mutate(heading = cumprod(bearing))
heading %>%
mutate(bearing = units::drop_units(bearing))
heading %>%
mutate(bearing = units::drop_units(.$bearing))
heading %>%
mutate(bearing2 = units::drop_units(bearing))
heading %>%
mutate(bearing2 = units::drop_units(bearing)) %>%
mutate(heading = cumprod(bearing2))
-120-(-115)
heading <-
resultados %>%
mutate(bearing = c(lwgeom::st_geod_azimuth(geometry),
units::set_units(NA, "radians")),
bearing = units::set_units(bearing, "degrees"),
bearing = round(bearing)) %>%
st_drop_geometry() %>%
select(edges.way_id, qgis_id, bearing)
resultados %>%
mutate(bearing = c(lwgeom::st_geod_azimuth(geometry),
units::set_units(NA, "radians")),
bearing = units::set_units(bearing, "degrees"),
bearing = round(bearing)) %>%
st_drop_geometry() %>%
select(edges.way_id, qgis_id, bearing)
altimetrias_sel
altimetrias_sel %>% mapview()
# Selecionar somente linhas que possuem os mesmos osm_id da rota - queremos os
# qgis_id dessas linhas
altimetrias_sel <-
altimetrias %>%
filter(osm_id %in% resultados$edges.way_id)
altimetrias_sel %>% mapview()
resultados %>%
mutate(bearing = c(lwgeom::st_geod_azimuth(geometry),
units::set_units(NA, "radians")),
bearing = units::set_units(bearing, "degrees"),
bearing = round(bearing)) %>%
st_drop_geometry() %>%
select(edges.way_id, qgis_id, bearing)
?lwgeom::st_geod_azimuth
resultados %>%
mutate(bearing = c(lwgeom::st_geod_azimuth(geometry),
units::set_units(NA, "radians")),
bearing = units::set_units(bearing, "degrees"),
bearing = round(bearing))
resultados %>%
mutate(bearing = c(lwgeom::st_geod_azimuth(geometry),
units::set_units(NA, "radians")),
bearing = units::set_units(bearing, "degrees"),
bearing = round(bearing)) %>%
mutate(lat_to = shift(matched_points.lat, type = 'lead'),
lon_to = shift(matched_points.lon, type = 'lead'))
resultados
resultados <- sprintf('%s/000144_00.csv', pasta_csv2)
resultados <- read_delim(resultados, delim = ';', col_types = 'cidddddddicddccciiiddcc')
resultados <- resultados %>% select(edges.way_id, edges.length, matched_points.lat, matched_points.lon, isovalor_var)
resultados %>%
mutate(lat_to = shift(matched_points.lat, type = 'lead'),
lon_to = shift(matched_points.lon, type = 'lead'))
?bearing
resultados %>%
mutate(lat_to = shift(matched_points.lat, type = 'lead'),
lon_to = shift(matched_points.lon, type = 'lead')) %>%
mutate(this = bearing(c(matched_points.lon, matched_points.lat), c(lon_to, lat_to)))
resultados <-
resultados %>%
mutate(lat_to = shift(matched_points.lat, type = 'lead'),
lon_to = shift(matched_points.lon, type = 'lead'))
resultados
resultados %>%
mutate(this = bearing(c(matched_points.lon, matched_points.lat), c(lon_to, lat_to)))
resultados %>%
mutate(this = bearing(c(.$matched_points.lon, .$matched_points.lat), c(lon_to, lat_to)))
resultados %>%
mutate(this = bearing(c(.$matched_points.lon, .$matched_points.lat), c(.$lon_to, .$lat_to)))
?seq_along
resultados %>%
mutate(this = bearing(cbind(matched_points.lon, matched_points.lat), cbind(lon_to, lat_to)))
resultados %>%
mutate(this = bearing(cbind(matched_points.lon, matched_points.lat), cbind(lon_to, lat_to))) %>%
select(edges.way_id, qgis_id, this)
resultados <- sprintf('%s/000144_00.csv', pasta_csv2)
resultados <- read_delim(resultados, delim = ';', col_types = 'cidddddddicddccciiiddcc')
resultados <- resultados %>% select(edges.way_id, edges.length, matched_points.lat, matched_points.lon, isovalor_var)
# Selecionar somente linhas que possuem os mesmos osm_id da rota - queremos os
# qgis_id dessas linhas
altimetrias_sel <-
altimetrias %>%
filter(osm_id %in% resultados$edges.way_id) %>%
st_cast('POINT')
altimetrias_sel %>% mapview()
# Agora queremos os pontos de altimetria mais próximos aos pontos do map matching
alt_sel_ids <-
altimetrias_sel %>%
# select(osm_id, qgis_id) %>%
slice(st_nearest_feature(resultados, altimetrias_sel)) %>%
st_drop_geometry() %>%
select(qgis_id, length_m, elev_grad)
# Juntar pontos
resultados <- resultados %>% cbind(alt_sel_ids)
resultados <-
resultados %>%
mutate(lat_to = shift(matched_points.lat, type = 'lead'),
lon_to = shift(matched_points.lon, type = 'lead'))
resultados %>%
mutate(this = bearing(cbind(matched_points.lon, matched_points.lat), cbind(lon_to, lat_to))) %>%
select(edges.way_id, qgis_id, this)
resultados %>%
mutate(this = bearing(cbind(matched_points.lon, matched_points.lat), cbind(lon_to, lat_to))) %>%
slice(17:20) %>%
select(edges.way_id, qgis_id, this)
resultados %>%
mutate(this = bearing(cbind(matched_points.lon, matched_points.lat), cbind(lon_to, lat_to))) %>%
slice(17:20)
resultados %>%
mutate(this = bearing(cbind(matched_points.lat, matched_points.lon), cbind(lat_to, lon_to))) %>%
slice(17:20) %>%
select(edges.way_id, qgis_id, this)
resultados <- sprintf('%s/000144_00.csv', pasta_csv2)
resultados <- read_delim(resultados, delim = ';', col_types = 'cidddddddicddccciiiddcc')
resultados <- resultados %>% select(edges.way_id, edges.length, matched_points.lat, matched_points.lon, isovalor_var)
resultados <- resultados %>% st_as_sf(coords = c('matched_points.lon', 'matched_points.lat'), crs = 4326)
# Juntar pontos
resultados <- resultados %>% cbind(alt_sel_ids)
resultados %>% mapview(zcol = 'qgis_id')
esultados %>%
mutate(bearing = c(lwgeom::st_geod_azimuth(geometry),
units::set_units(NA, "radians")),
bearing = units::set_units(bearing, "degrees"),
bearing = round(bearing)) %>%
st_drop_geometry() %>%
select(edges.way_id, qgis_id, bearing)
resultados %>%
mutate(bearing = c(lwgeom::st_geod_azimuth(geometry),
units::set_units(NA, "radians")),
bearing = units::set_units(bearing, "degrees"),
bearing = round(bearing)) %>%
st_drop_geometry() %>%
select(edges.way_id, qgis_id, bearing)
resultados <- sprintf('%s/000144_00.csv', pasta_csv2)
resultados <- read_delim(resultados, delim = ';', col_types = 'cidddddddicddccciiiddcc')
resultados <- resultados %>% select(edges.way_id, edges.length, matched_points.lat, matched_points.lon, isovalor_var)
# Juntar pontos
resultados <- resultados %>% cbind(alt_sel_ids)
resultados %>%
mutate(lat_to = shift(matched_points.lat, type = 'lead'),
lon_to = shift(matched_points.lon, type = 'lead'),
this = bearing(cbind(matched_points.lat, matched_points.lon), cbind(lat_to, lon_to))) %>%
select(edges.way_id, qgis_id, this)
bliotecas
source('fun/setup.R')
# Estrutura de pastas
pasta_dados        <- "../../yellow_dados"
pasta_elevacao     <- sprintf("%s/03_curva_elevacao_sp", pasta_dados)
pasta_base         <- sprintf("%s/05_testes_viagens_20181112-20181117", pasta_dados)
pasta_csv2         <- sprintf("%s/viagens_processadas_csv2", pasta_base)
altimetrias <- sprintf('%s/viario_osm_com_elevacao_mdt_sem_z_por_quadra_com_aclividades.gpkg', pasta_elevacao)
altimetrias <- read_sf(altimetrias)
altimetrias <- altimetrias %>% filter(qgis_id != qgis_id_2)
altimetrias <- altimetrias %>% st_transform(4326)
head(altimetrias)
resultados <- sprintf('%s/000144_00.csv', pasta_csv2)
resultados <- read_delim(resultados, delim = ';', col_types = 'cidddddddicddccciiiddcc')
resultados <- resultados %>% select(edges.way_id, edges.length, matched_points.lat, matched_points.lon, isovalor_var)
# resultados <- resultados %>% st_as_sf(coords = c('matched_points.lon', 'matched_points.lat'), crs = 4326)
resultados %>% mapview(zcol = 'edges.way_id')
# Selecionar somente linhas que possuem os mesmos osm_id da rota - queremos os
# qgis_id dessas linhas
altimetrias_sel <-
altimetrias %>%
filter(osm_id %in% resultados$edges.way_id) %>%
st_cast('POINT')
altimetrias_sel %>% mapview()
# Agora queremos os pontos de altimetria mais próximos aos pontos do map matching
alt_sel_ids <-
altimetrias_sel %>%
# select(osm_id, qgis_id) %>%
slice(st_nearest_feature(resultados, altimetrias_sel)) %>%
st_drop_geometry() %>%
select(qgis_id, length_m, elev_grad)
# Agora queremos os pontos de altimetria mais próximos aos pontos do map matching
alt_sel_ids <-
altimetrias_sel %>%
# select(osm_id, qgis_id) %>%
slice(st_nearest_feature(resultados %>% st_as_sf(coords = c('matched_points.lon', 'matched_points.lat'), crs = 4326), altimetrias_sel)) %>%
st_drop_geometry() %>%
select(qgis_id, length_m, elev_grad)
# Juntar pontos
resultados <- resultados %>% cbind(alt_sel_ids)
resultados %>% st_as_sf(coords = c('matched_points.lon', 'matched_points.lat'), crs = 4326) %>% mapview(zcol = 'qgis_id')
# Calcular ângulo de direção (bearing) com geosphere::bearing()
# https://rspatial.org/raster/sphere/3-direction.html
# As tentativas com o lwgeom::st_geod_azimuth() deram errado porque a ordem
# do latlong ficava invertida (ao ter uma geometria no shape, o long entra
# antes do lat, o que faz inverter o sinal em alguns momentos: de )
resultados %>%
mutate(lat_to = shift(matched_points.lat, type = 'lead'),
lon_to = shift(matched_points.lon, type = 'lead'),
this = bearing(cbind(matched_points.lat, matched_points.lon), cbind(lat_to, lon_to))) %>%
select(edges.way_id, qgis_id, this)
resultados %>%
mutate(lat_to = shift(matched_points.lat, type = 'lead'),
lon_to = shift(matched_points.lon, type = 'lead'),
this = bearing(cbind(matched_points.lat, matched_points.lon), cbind(lat_to, lon_to)))
resultados %>%
mutate(lat_to = shift(matched_points.lat, type = 'lead'),
lon_to = shift(matched_points.lon, type = 'lead'),
this = bearing(cbind(matched_points.lat, matched_points.lon), cbind(lat_to, lon_to))) %>%
select(-c(edges.length, isovalor_var, elev_grad))
# Calcular ângulo de direção (bearing) com geosphere::bearing()
# https://rspatial.org/raster/sphere/3-direction.html
# As tentativas com o lwgeom::st_geod_azimuth() deram errado porque a ordem
# do latlong ficava invertida (ao ter uma geometria no shape, o long entra
# antes do lat, o que faz inverter o sinal em alguns momentos: de -47.67 ia para +150 por exemplo)
resultados %>%
mutate(lat_to = shift(matched_points.lat, type = 'lead'),
lon_to = shift(matched_points.lon, type = 'lead'),
this = bearing(cbind(matched_points.lat, matched_points.lon), cbind(lat_to, lon_to))) %>%
select(-c(edges.length, isovalor_var, elev_grad)) %>%
mutate(that = lwgeom::st_geod_azimuth(cbind(matched_points.lat, matched_points.lon), cbind(lat_to, lon_to)))
# Calcular ângulo de direção (bearing) com geosphere::bearing()
# https://rspatial.org/raster/sphere/3-direction.html
# As tentativas com o lwgeom::st_geod_azimuth() deram errado porque a ordem
# do latlong ficava invertida (ao ter uma geometria no shape, o long entra
# antes do lat, o que faz inverter o sinal em alguns momentos: de -47.67 ia para +150 por exemplo)
resultados %>%
mutate(lat_to = shift(matched_points.lat, type = 'lead'),
lon_to = shift(matched_points.lon, type = 'lead'),
this = bearing(cbind(matched_points.lat, matched_points.lon), cbind(lat_to, lon_to))) %>%
select(-c(edges.length, isovalor_var, elev_grad)) %>%
mutate(that = lwgeom::st_geod_azimuth(cbind(matched_points.lon, matched_points.lat), cbind(lon_to, lat_to)))
# Calcular ângulo de direção (bearing) com geosphere::bearing()
# https://rspatial.org/raster/sphere/3-direction.html
# As tentativas com o lwgeom::st_geod_azimuth() deram errado porque a ordem
# do latlong ficava invertida (ao ter uma geometria no shape, o long entra
# antes do lat, o que faz inverter o sinal em alguns momentos: de -47.67 ia para +150 por exemplo)
resultados %>%
mutate(lat_to = shift(matched_points.lat, type = 'lead'),
lon_to = shift(matched_points.lon, type = 'lead'),
this = bearing(cbind(matched_points.lat, matched_points.lon), cbind(lat_to, lon_to))) %>%
select(-c(edges.length, isovalor_var, elev_grad)) %>%
mutate(that = lwgeom::st_geod_azimuth(cbind(matched_points.lat, matched_points.lon), cbind(lat_to, lon_to)))
# Calcular ângulo de direção (bearing) com geosphere::bearing()
# https://rspatial.org/raster/sphere/3-direction.html
# As tentativas com o lwgeom::st_geod_azimuth() deram errado porque a ordem
# do latlong ficava invertida (ao ter uma geometria no shape, o long entra
# antes do lat, o que faz inverter o sinal em alguns momentos: de -47.67 ia para +150 por exemplo)
resultados %>%
mutate(lat_to = shift(matched_points.lat, type = 'lead'),
lon_to = shift(matched_points.lon, type = 'lead'),
this = bearing(cbind(matched_points.lat, matched_points.lon), cbind(lat_to, lon_to))) %>%
select(-c(edges.length, isovalor_var, elev_grad)) %>%
mutate(that = lwgeom::st_geod_azimuth(cbind(matched_points.lat, matched_points.lon)))
# Calcular ângulo de direção (bearing) com geosphere::bearing()
# https://rspatial.org/raster/sphere/3-direction.html
# As tentativas com o lwgeom::st_geod_azimuth() deram errado porque a ordem
# do latlong ficava invertida (ao ter uma geometria no shape, o long entra
# antes do lat, o que faz inverter o sinal em alguns momentos: de -47.67 ia para +150 por exemplo)
resultados %>%
mutate(lat_to = shift(matched_points.lat, type = 'lead'),
lon_to = shift(matched_points.lon, type = 'lead'),
this = bearing(cbind(matched_points.lat, matched_points.lon), cbind(lat_to, lon_to))) %>%
select(-c(edges.length, isovalor_var, elev_grad)) %>%
mutate(that = lwgeom::st_geod_azimuth(cbind(matched_points.lon, matched_points.lat)))
# Calcular ângulo de direção (bearing) com geosphere::bearing()
# https://rspatial.org/raster/sphere/3-direction.html
# As tentativas com o lwgeom::st_geod_azimuth() deram errado porque a ordem
# do latlong ficava invertida (ao ter uma geometria no shape, o long entra
# antes do lat, o que faz inverter o sinal em alguns momentos: de -47.67 ia para +150 por exemplo)
resultados %>%
mutate(lat_to = shift(matched_points.lat, type = 'lead'),
lon_to = shift(matched_points.lon, type = 'lead'),
this = bearing(cbind(matched_points.lat, matched_points.lon), cbind(lat_to, lon_to))) %>%
select(-c(edges.length, isovalor_var, elev_grad)) %>%
mutate(that = lwgeom::st_geod_azimuth(st_sfc(cbind(matched_points.lon, matched_points.lat), crs = 4326)))
# Calcular ângulo de direção (bearing) com geosphere::bearing()
# https://rspatial.org/raster/sphere/3-direction.html
# As tentativas com o lwgeom::st_geod_azimuth() deram errado porque a ordem
# do latlong ficava invertida (ao ter uma geometria no shape, o long entra
# antes do lat, o que faz inverter o sinal em alguns momentos: de -47.67 ia para +150 por exemplo)
resultados %>%
mutate(lat_to = shift(matched_points.lat, type = 'lead'),
lon_to = shift(matched_points.lon, type = 'lead'),
this = bearing(cbind(matched_points.lat, matched_points.lon), cbind(lat_to, lon_to))) %>%
select(-c(edges.length, isovalor_var, elev_grad)) %>%
mutate(that = lwgeom::st_geod_azimuth(st_sfc(cbind(matched_points.lat, matched_points.lon), crs = 4326)))
resultados %>%
mutate(lat_to = shift(matched_points.lat, type = 'lead'),
lon_to = shift(matched_points.lon, type = 'lead'),
this = bearing(cbind(matched_points.lat, matched_points.lon), cbind(lat_to, lon_to)))
resultados %>%
mutate(lat_to = shift(matched_points.lat, type = 'lead'),
lon_to = shift(matched_points.lon, type = 'lead'),
this = bearing(cbind(matched_points.lat, matched_points.lon), cbind(lat_to, lon_to)),
that = bearing(cbind(matched_points.lon, matched_points.lat), cbind(lon_to, lat_to)))
resultados %>%
mutate(lat_to = shift(matched_points.lat, type = 'lead'),
lon_to = shift(matched_points.lon, type = 'lead'),
this = bearing(cbind(matched_points.lat, matched_points.lon), cbind(lat_to, lon_to)),
that = bearing(cbind(matched_points.lon, matched_points.lat), cbind(lon_to, lat_to))) %>%
select(-c(edges.length, isovalor_var, elev_grad))
resultados %>%
mutate(lat_to = shift(matched_points.lat, type = 'lead'),
lon_to = shift(matched_points.lon, type = 'lead'),
this = bearing(cbind(matched_points.lat, matched_points.lon), cbind(lat_to, lon_to)),
that = bearing(cbind(matched_points.lon, matched_points.lat), cbind(lon_to, lat_to))) %>%
select(-c(edges.length, isovalor_var, elev_grad)) %>%
mutate(those = lwgeom::st_geod_azimuth(st_sfc(cbind(matched_points.lat, matched_points.lon), crs = 4326)))
resultados %>%
mutate(lat_to = shift(matched_points.lat, type = 'lead'),
lon_to = shift(matched_points.lon, type = 'lead'),
this = bearing(cbind(matched_points.lat, matched_points.lon), cbind(lat_to, lon_to)),
that = bearing(cbind(matched_points.lon, matched_points.lat), cbind(lon_to, lat_to))) %>%
select(-c(edges.length, isovalor_var, elev_grad)) %>%
st_as_sf(coords = c('matched_points.lon', 'matched_points.lat'), crs = 4326)
mutate(those = c(lwgeom::st_geod_azimuth(geometry),
units::set_units(NA, "radians")),
those = units::set_units(bearing, "degrees"))
resultados %>%
mutate(lat_to = shift(matched_points.lat, type = 'lead'),
lon_to = shift(matched_points.lon, type = 'lead'),
this = bearing(cbind(matched_points.lat, matched_points.lon), cbind(lat_to, lon_to)),
that = bearing(cbind(matched_points.lon, matched_points.lat), cbind(lon_to, lat_to))) %>%
select(-c(edges.length, isovalor_var, elev_grad)) %>%
st_as_sf(coords = c('matched_points.lon', 'matched_points.lat'), crs = 4326) %>%
mutate(those = c(lwgeom::st_geod_azimuth(geometry),
units::set_units(NA, "radians")),
those = units::set_units(bearing, "degrees"))
resultados %>%
mutate(lat_to = shift(matched_points.lat, type = 'lead'),
lon_to = shift(matched_points.lon, type = 'lead'),
this = bearing(cbind(matched_points.lat, matched_points.lon), cbind(lat_to, lon_to)),
that = bearing(cbind(matched_points.lon, matched_points.lat), cbind(lon_to, lat_to))) %>%
select(-c(edges.length, isovalor_var, elev_grad)) %>%
st_as_sf(coords = c('matched_points.lon', 'matched_points.lat'), crs = 4326) %>%
mutate(those = c(lwgeom::st_geod_azimuth(geometry),
units::set_units(NA, "radians")),
those = units::set_units(those, "degrees"))
resultados %>%
mutate(lat_to = shift(matched_points.lat, type = 'lead'),
lon_to = shift(matched_points.lon, type = 'lead'),
this = bearing(cbind(matched_points.lat, matched_points.lon), cbind(lat_to, lon_to)),
that = bearing(cbind(matched_points.lon, matched_points.lat), cbind(lon_to, lat_to))) %>%
select(-c(edges.length, isovalor_var, elev_grad)) %>%
st_as_sf(coords = c('matched_points.lon', 'matched_points.lat'), crs = 4326) %>%
mutate(those = c(lwgeom::st_geod_azimuth(geometry),
units::set_units(NA, "radians")),
those = units::set_units(those, "degrees")) %>%
st_drop_geometry()
resultados %>%
mutate(lat_to = shift(matched_points.lat, type = 'lead'),
lon_to = shift(matched_points.lon, type = 'lead'),
this = bearing(cbind(matched_points.lat, matched_points.lon), cbind(lat_to, lon_to)),
that = bearing(cbind(matched_points.lon, matched_points.lat), cbind(lon_to, lat_to))) %>%
select(-c(edges.length, isovalor_var, elev_grad)) %>%
st_as_sf(coords = c('matched_points.lon', 'matched_points.lat'), crs = 4326) %>%
mutate(those = lwgeom::st_geod_azimuth(geometry)) %>%
st_drop_geometry()
