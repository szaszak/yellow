select(-time) %>%
mutate(perc_cic = ext_ciclo / distance * 100)
# hex_resultados_tempo_ok %>%
#   filter(orig == '89a81000317ffff') %>%
#   select(orig, viagens_a_tempo, dist_total, ext_ciclo_tot_m, infraciclo_por_vg, uso_perc_ciclo)
# sample_n(hex_resultados_tempo_ok, 20)
# hex_resultados_tempo_ok %>% filter(is.na(particip_perc_extciclo_vs_todo))
# Agrupar por hexágonos, somente as viagens fora do limite de tempo - resultado
# é hexágonos com viagens todas fora do tempo ou em parte fora do tempo
hex_resultados_fora_tempo <-
ods_resultados %>%
filter(is.na(time)) %>%
# Calcular total de viagens em cada hexágono de origem
group_by(orig) %>%
summarise(viagens_fora_tempo = sum(viagens)) %>%
ungroup()
# Juntar resultados em um dataframe único
hex_resultados <-
hex_resultados_tempo_ok %>%
full_join(hex_resultados_fora_tempo, by = 'orig') %>%
relocate(viagens_fora_tempo, .before = 'viagens_a_tempo') %>%
replace(is.na(.), 0) %>%
mutate(tot_viagens = viagens_a_tempo + viagens_fora_tempo, .after = 'orig') %>%
# Categorizar hexágonos de origem segundo viagens presentes nos resultados
mutate(class_hex_orig = case_when(viagens_a_tempo > 0 & viagens_fora_tempo == 0 ~ 'viagens todas a tempo',
viagens_a_tempo == 0 & viagens_fora_tempo > 0 ~ 'viagens fora do tempo',
viagens_a_tempo > 0 & viagens_fora_tempo > 0  ~ 'viagens parc. a tempo',
TRUE ~ NA),
.after = 'orig')
head(hex_resultados, 10)
# Checagem
sum(hex_resultados$tot_viagens) == sum(ods_vgs$viagens)
# sum(hex_resultados$perc_part)
# Gravar resultados
hex_resultados_out <- sprintf('%s/01_lpSolveX_resultados_por_hexagono_alocacao%s_rotas%s_res09_%smin.csv', pasta_aop_lpsolveX, ano1, ano2, tempo_max)
write_delim(hex_resultados, hex_resultados_out, delim = ';')
# Limpar ambiente
rm(ciclo_od, hex_resultados_tempo_ok, hex_resultados_fora_tempo, hex_resultados_out)
# ------------------------------------------------------------------------------
# Quantidade de viagens e extensão percorrida em infra ciclo - por osm_id
# ------------------------------------------------------------------------------
# Qual o número total de viagens que passam por cada osm_id?
# Quanto cada osm_id é importante? Ou seja, qual a extensão em infra cicloviária
# percorrida em cada osm_id quando somadas todas as rotas que passam por aquele
# osm_id?
# Visão por infraestrutura cicloviária utilizada: quanto de distância (em metros)
# foi percorrido em cada osm_id em determinado ano base?
osm_id_resultados <-
ods_vgs %>%
# Juntar quantidade de viagens para cada par OD
left_join(osm_ids, by = c('orig', 'dest')) %>%
# Queremos somente os osm_id em que há infra cicloviária. Todas elas vão estar
# dentro do tempo delimitado. Há viagens que possuem tempo 0 mas não têm
# osm_ids - isso porque são as viagens de um hexágono para ele mesmo, então
# não usam osm_ids no caminho:
# filter(!is.na(time)) %>% sample_n(20)
filter(!is.na(osm_way_id)) %>%
# Substituir NAs por zero para viagens que não passaram por infra_ciclo
mutate(ext_percorrida = ifelse(is.na(ext_percorrida), 0, ext_percorrida)) %>%
# Extensão percorrida (em metros) é a quantidade de viagens vezes a extensão
# percorrida por rota
mutate(ext_ciclo_vgs = ext_percorrida * viagens) %>%
# Calcular total de viagens em cada hexágono de origem e total da extensão
# (em metros) percorrida em infra cicloviária a partir daquela origem
group_by(osm_way_id) %>%
summarise(viagens_tot     = sum(viagens),
ext_ciclo_tot_m = sum(ext_ciclo_vgs))
# Checagem - soma das extensões percorridas em infraciclo devem ser as mesmas
sum(hex_resultados$ext_ciclo_tot_m) == sum(osm_id_resultados$ext_ciclo_tot_m)
# Calcular percentual de participação do todo
osm_id_resultados <-
osm_id_resultados %>%
mutate(particip_perc_viagens_vs_todo  = viagens_tot / sum(viagens_tot) * 100,
particip_perc_extciclo_vs_todo = ext_ciclo_tot_m / sum(ext_ciclo_tot_m) * 100)
head(osm_id_resultados)
# sum(osm_id_resultados$perc_part)
# Gravar resultados
osm_id_resultados_out <- sprintf('%s/02_lpSolveX_resultados_por_osmid_alocacao%s_rotas%s_res09_%smin.csv', pasta_aop_lpsolveX, ano1, ano2, tempo_max)
write_delim(osm_id_resultados, osm_id_resultados_out, delim = ';')
# Limpar ambiente
rm(osm_id_resultados_out, osm_id_resultados, osm_ids)
# ------------------------------------------------------------------------------
# Base geral - hexágonos com população de interesse e oportunidades de interesse
# ------------------------------------------------------------------------------
# Demanda: quantidade de pessoas por hexágono
pop <- sprintf('%s/01_shape_resumido_estudantes_por_hexagono.gpkg', pasta_ttmatrix_24_28)
pop <- read_sf(pop)
head(pop)
# Oferta: quantidade de matrículas por hexágono
mat <- sprintf('%s/02_matriculas_censo_escolar_2023_associadas_a_hexagonos.gpkg', pasta_ttmatrix_24_28)
mat <- read_sf(mat) %>% st_drop_geometry()
# Aplicar filtros de escolas públicas sem restrição e com vagas de ensino médio
mat <- mat %>% filter(QT_MAT_MED > 0 & CA_CATEGORIA == 'Pública' & CA_RESTRICAO == 'ESCOLA EM FUNCIONAMENTO E SEM RESTRIÇÃO DE ATENDIMENTO')
mat <- mat %>% group_by(id_hex) %>% summarise(matriculas_totais = sum(QT_MAT_MED)) %>% ungroup()
head(mat)
# Isolar somente hexágonos
hexagonos <- pop %>% select(id_hex)
# Juntar população e matrículas aos hexágonos
hex_pop_op <-
pop %>%
st_drop_geometry() %>%
left_join(mat, by = 'id_hex') %>%
replace(is.na(.), 0)
head(hex_pop_op)
# Limpar ambiente
rm(pop, mat)
# Resultados por hexágono do lpSolve para o ano 1
hex_resultados_1 <- sprintf('%s/07_resultados_por_hexagono_%s_res09_%smin.csv', pasta_opaop_ano1, ano1, tempo_max)
hex_resultados_1 <- read_delim(hex_resultados_1, delim = ';', col_types = 'cciiidddd')
hex_resultados_1 <- hex_resultados_1 %>% select(orig,
hexclas_24 = class_hex_orig,
vgs_tot_24 = tot_viagens,
vgs_nok_24 = viagens_fora_tempo,
vgs_ok_24  = viagens_a_tempo,
vgs_ok_24_tempo_med = tempo_medio_vgs,
vgs_ok_24_tempo_tot = tempo_total,
ext_tot_24  = dist_total,
ext_cic_24  = ext_ciclo_tot_m,
cic_vg_24   = infraciclo_por_vg,
cic_perc_24 = uso_perc_ciclo,
perccic_24  = particip_perc_extciclo_vs_todo)
head(hex_resultados_1)
# Juntar aos resultados também as origens impossíveis
orig_impossiveis <- sprintf('%s/06_lpsolve_hexagonos_impossiveis_%s_%smin.gpkg', pasta_opaop_ano1, ano1, tempo_max)
orig_impossiveis <- read_sf(orig_impossiveis) %>% st_drop_geometry() %>% select(orig = id_hex)
orig_impossiveis <- orig_impossiveis %>% mutate(hexclas_24 = 'hex origem impossivel',
vgs_tot_24 = as.numeric(NA),
vgs_nok_24  = as.numeric(NA),
vgs_ok_24 = as.numeric(NA),
vgs_ok_24_tempo_med = as.numeric(NA),
vgs_ok_24_tempo_tot = as.numeric(NA),
ext_tot_24  = as.numeric(NA),
ext_cic_24  = as.numeric(NA),
cic_vg_24   = as.numeric(NA),
cic_perc_24 = as.numeric(NA),
perccic_24  = as.numeric(NA))
hex_resultados_1 <- hex_resultados_1 %>% rbind(orig_impossiveis) %>% arrange(orig)
hex_resultados_1 %>% filter(hexclas_24 == 'hex origem impossivel')
head(hex_resultados_1)
# Ficou algum hexágono de fora?
hex_pop_op %>% filter(!id_hex %in% hex_resultados_1$orig & estudantes_totais > 0 & matriculas_totais > 0)
hex_resultados_1 %>% group_by(orig) %>% tally() %>% filter(n > 1)
# Resultados por hexágono do lpSolveX - alocação de 2024 e rotas de 2028
hex_resultados_2 <- hex_resultados
hex_resultados_2 <- hex_resultados_2 %>% select(orig,
hexclas_28X = class_hex_orig,
vgs_tot_28X = tot_viagens,
vgs_nok_28X = viagens_fora_tempo,
vgs_ok_28X  = viagens_a_tempo,
vgs_ok_28X_tempo_med = tempo_medio_vgs,
vgs_ok_28X_tempo_tot = tempo_total,
ext_tot_28X  = dist_total,
ext_cic_28X  = ext_ciclo_tot_m,
cic_vg_28X   = infraciclo_por_vg,
cic_perc_28X = uso_perc_ciclo,
perccic_28X  = particip_perc_extciclo_vs_todo)
head(hex_resultados_2)
# Juntar aos resultados também as origens impossíveis, também de 2024
names(orig_impossiveis) <- names(hex_resultados_2)
hex_resultados_2 <- hex_resultados_2 %>% rbind(orig_impossiveis) %>% arrange(orig)
head(hex_resultados_2)
# Ficou algum hexágono de fora?
hex_pop_op %>% filter(!id_hex %in% hex_resultados_2$orig & estudantes_totais > 0 & matriculas_totais > 0)
hex_resultados_2 %>% group_by(orig) %>% tally() %>% filter(n > 1)
# Juntar resultados na grade completa de hexágonos
hex_resultados <-
hex_pop_op %>%
left_join(hex_resultados_1, by = c('id_hex' = 'orig')) %>%
left_join(hex_resultados_2, by = c('id_hex' = 'orig')) %>%
# Demarcar hexágonos sem população ou matrícula
mutate(hexclas_24 = ifelse(is.na(hexclas_24), 'hexag sem pop ou mat', hexclas_24),
hexclas_28X = ifelse(is.na(hexclas_28X), 'hexag sem pop ou mat', hexclas_28X)) %>%
# Quais as diferenças de viagens feitas dentro do tempo e extensão percorrida
# em infraestrutura cicloviária dessas mesmas viagens entre os dois cenários?
mutate(dif_vgs_ok = vgs_ok_28X - vgs_ok_24,
dif_cic_ok = ext_cic_28X - ext_cic_24,
dif_cic_vg_ok = cic_vg_28X - cic_vg_24)
# Juntar resultados ao shapefile de hexágonos
hexagonos <-
hexagonos %>%
left_join(hex_resultados, by = 'id_hex') %>%
relocate(c(perccic_24, perccic_28X, geom), .after = last_col())
# Gravar resultados
out_hex <- sprintf('%s/hexagonos_sp_resultados_metodo_lpSolveX_res09_2024_2028.gpkg', pasta_lpsolve_24_28)
st_write(hexagonos, out_hex, driver = 'GPKG', append = FALSE, delete_layer = TRUE)
hexagonos %>% st_drop_geometry() %>% select(matches('_tempo')) %>% summary()
# Limpar ambiente
rm(hex_resultados_1, hex_resultados_2, orig_impossiveis, hex_pop_op, hex_resultados,
out_hex, ods_resultados, ods_vgs)
names(hexagonos)
hexagonos %>%
st_drop_geometry() %>%
filter(estudantes_totais > 0 & vgs_ok_24 > 0) %>%
select(id_hex, vgs_tot_24, vgs_ok_24,
ext_tot_24, ext_cic_24, cic_vg_24, cic_perc_24,
ext_tot_28X, ext_cic_28X, cic_vg_28X, cic_perc_28X)
hexagonos %>%
st_drop_geometry() %>%
filter(estudantes_totais > 0) %>%
filter(estudantes_totais > 0 & vgs_ok_24 > 0) %>%
select(id_hex, vgs_tot_24, vgs_ok_24,
ext_tot_24, ext_cic_24, cic_vg_24, cic_perc_24,
ext_tot_28X, ext_cic_28X, cic_vg_28X, cic_perc_28X)
hexagonos %>%
st_drop_geometry() %>%
filter(estudantes_totais > 0) %>%
filter(estudantes_totais > 0 & vgs_ok_24 > 0) %>%
select(id_hex, vgs_tot_24, vgs_ok_24,
ext_tot_24, ext_cic_24, cic_vg_24, cic_perc_24,
ext_tot_28X, ext_cic_28X, cic_vg_28X, cic_perc_28X) %>%
mutate(ext_viagens = ext_tot_24 / vgs_ok_24) %>%
select(cic_perc_24, ext_viagens) %>%
summary()
hexagonos %>%
st_drop_geometry() %>%
filter(estudantes_totais > 0) %>%
filter(estudantes_totais > 0 & vgs_ok_24 > 0) %>%
select(id_hex, vgs_tot_24, vgs_ok_24,
ext_tot_24, ext_cic_24, cic_vg_24, cic_perc_24,
ext_tot_28X, ext_cic_28X, cic_vg_28X, cic_perc_28X) %>%
mutate(ext_viagens = ext_tot_24 / vgs_ok_24) %>%
filter(ext_viagens > 500) %>%
select(cic_perc_24, ext_viagens) %>%
summary()
hexagonos %>%
st_drop_geometry() %>%
filter("hexclas_24" != 'hex origem impossivel' & "hexclas_24" != 'viagens fora do tempo')
hexagonos %>%
st_drop_geometry() %>%
filter("hexclas_24" != 'hex origem impossivel' & "hexclas_24" != 'viagens fora do tempo') %>%
filter(estudantes_totais > 0)
hexagonos %>%
st_drop_geometry() %>%
filter("hexclas_24" != 'hex origem impossivel' & "hexclas_24" != 'viagens fora do tempo') %>%
filter(estudantes_totais > 0) %>%
filter(estudantes_totais > 0 & vgs_ok_24 > 0)
hexagonos %>%
st_drop_geometry() %>%
filter("hexclas_24" != 'hex origem impossivel' & "hexclas_24" != 'viagens fora do tempo') %>%
select(hex_clas24)
rlang::last_trace()
names(hexagonos)
hexagonos %>%
st_drop_geometry() %>%
filter(hexclas_24 != 'hex origem impossivel' & hexclas_24 != 'viagens fora do tempo')
hexagonos %>%
st_drop_geometry() %>%
filter(hexclas_24 != 'hex origem impossivel' & hexclas_24 != 'viagens fora do tempo') %>%
filter(estudantes_totais > 0)
# Tempo médio 2024
hexagonos %>%
st_drop_geometry() %>%
filter(hexclas_24 != 'hex origem impossivel' & hexclas_24 != 'viagens fora do tempo') %>%
filter(estudantes_totais > 0) %>%
filter(estudantes_totais > 0 & vgs_ok_24 > 0) %>%
select(id_hex, vgs_ok_24_tempo_med) %>%
mutate(tempo_medio_fx = case_when(between(vgs_ok_24_tempo_med,   0.00, 180.00) ~ '00-03 minutos',
between(vgs_ok_24_tempo_med, 180.01, 360.00) ~ '03-06 minutos',
between(vgs_ok_24_tempo_med, 360.01, 540.00) ~ '06-09 minutos',
between(vgs_ok_24_tempo_med, 540.01, 720.00) ~ '09-12 minutos',
between(vgs_ok_24_tempo_med, 720.01, 900.00) ~ '12-15 minutos',
is.na(vgs_ok_24_tempo_med) ~ 'Mais de 15 min')) %>%
group_by(tempo_medio_fx) %>%
tally() %>%
mutate(perc_tot = n / sum(n) * 100)
hexagonos %>%
st_drop_geometry() %>%
filter(hexclas_24 != 'hex origem impossivel' & hexclas_24 != 'viagens fora do tempo')
nrow(hexagonos)
496/nrow(hexagonos)
496/nrow(hexagonos)*100
hexagonos %>%
st_drop_geometry() %>%
filter(hexclas_24 != 'hex origem impossivel' & hexclas_24 != 'viagens fora do tempo') %>%
filter(estudantes_totais > 0)
hexagonos %>%
st_drop_geometry() %>%
filter(estudantes_totais > 0)
496/7913*100
# Tempo médio 2024
hexagonos %>%
st_drop_geometry() %>%
filter(estudantes_totais > 0) %>%
filter(hexclas_24 != 'hex origem impossivel' & hexclas_24 != 'viagens fora do tempo') %>%
filter(estudantes_totais > 0 & vgs_ok_24 > 0) %>%
select(id_hex, vgs_ok_24_tempo_med) %>%
mutate(tempo_medio_fx = case_when(between(vgs_ok_24_tempo_med,   0.00, 180.00) ~ '00-03 minutos',
between(vgs_ok_24_tempo_med, 180.01, 360.00) ~ '03-06 minutos',
between(vgs_ok_24_tempo_med, 360.01, 540.00) ~ '06-09 minutos',
between(vgs_ok_24_tempo_med, 540.01, 720.00) ~ '09-12 minutos',
between(vgs_ok_24_tempo_med, 720.01, 900.00) ~ '12-15 minutos',
is.na(vgs_ok_24_tempo_med) ~ 'Mais de 15 min')) %>%
group_by(tempo_medio_fx) %>%
tally() %>%
mutate(perc_tot = n / sum(n) * 100)
# Tempo médio 2028
hexagonos %>%
st_drop_geometry() %>%
# filter(hexclas_24 != 'hexag sem pop ou mat') %>%
filter(estudantes_totais > 0) %>%
filter(hexclas_28X != 'hex origem impossivel' & hexclas_28X != 'viagens fora do tempo') %>%
select(id_hex, vgs_ok_28X_tempo_med) %>%
mutate(tempo_medio_fx = case_when(between(vgs_ok_28X_tempo_med,   0.00, 180.00) ~ '00-03 minutos',
between(vgs_ok_28X_tempo_med, 180.01, 360.00) ~ '03-06 minutos',
between(vgs_ok_28X_tempo_med, 360.01, 540.00) ~ '06-09 minutos',
between(vgs_ok_28X_tempo_med, 540.01, 720.00) ~ '09-12 minutos',
between(vgs_ok_28X_tempo_med, 720.01, 900.00) ~ '12-15 minutos',
is.na(vgs_ok_28X_tempo_med) ~ 'Mais de 15 min')) %>%
group_by(tempo_medio_fx) %>%
tally() %>%
mutate(perc_tot = n / sum(n) * 100)
# Tempo médio 2024
hexagonos %>%
st_drop_geometry() %>%
filter(estudantes_totais > 0) %>%
filter(hexclas_24 != 'hex origem impossivel' & hexclas_24 != 'viagens fora do tempo') %>%
select(id_hex, vgs_ok_24_tempo_med) %>%
mutate(tempo_medio_fx = case_when(between(vgs_ok_24_tempo_med,   0.00, 180.00) ~ '00-03 minutos',
between(vgs_ok_24_tempo_med, 180.01, 360.00) ~ '03-06 minutos',
between(vgs_ok_24_tempo_med, 360.01, 540.00) ~ '06-09 minutos',
between(vgs_ok_24_tempo_med, 540.01, 720.00) ~ '09-12 minutos',
between(vgs_ok_24_tempo_med, 720.01, 900.00) ~ '12-15 minutos',
is.na(vgs_ok_24_tempo_med) ~ 'Mais de 15 min')) %>%
group_by(tempo_medio_fx) %>%
tally() %>%
mutate(perc_tot = n / sum(n) * 100)
hexagonos %>%
st_drop_geometry() %>%
filter(estudantes_totais > 0) %>%
filter(hexclas_24 != 'hex origem impossivel' & hexclas_24 != 'viagens fora do tempo') %>%
select(hexclas_24)
hexagonos %>%
st_drop_geometry() %>%
filter(estudantes_totais > 0) %>%
filter(hexclas_24 != 'hex origem impossivel' & hexclas_24 != 'viagens fora do tempo') %>%
group_by(hexclas_24) %>% tally()
82/7469
82/7469*100
max(hexagonos$cic_vg_24, na.rm = TRUE) # 2398.389
max(hexagonos$cic_vg_28X, na.rm = TRUE) # 2623.132
# Uso médio de infra cicloviária 2024
hexagonos %>%
st_drop_geometry() %>%
filter(estudantes_totais > 0) %>%
filter(hexclas_24 != 'hex origem impossivel' & hexclas_24 != 'viagens fora do tempo') %>%
select(id_hex, cic_vg_24) %>%
mutate(uso_medio_fx = case_when(between(cic_vg_24,    0.00,  500.00) ~ '0000-0500 metros',
between(cic_vg_24,  500.01, 1000.00) ~ '0500-1000 metros',
between(cic_vg_24, 1000.01, 1500.00) ~ '1000-1500 metros',
between(cic_vg_24, 1500.01, 2000.00) ~ '1500-2000 metros',
between(cic_vg_24, 2000.01, 2650.00) ~ '2000-2650 metros',
TRUE ~ NA)) %>%
group_by(uso_medio_fx) %>%
tally() %>%
mutate(perc_tot = n / sum(n) * 100) %>%
arrange(desc(uso_medio_fx))
# Uso médio de infra cicloviária 2028
hexagonos %>%
st_drop_geometry() %>%
filter(estudantes_totais > 0) %>%
filter(hexclas_28X != 'hex origem impossivel' & hexclas_28X != 'viagens fora do tempo') %>%
select(id_hex, cic_vg_28X) %>%
mutate(uso_medio_fx = case_when(between(cic_vg_28X,    0.00,  500.00) ~ '0000-0500 metros',
between(cic_vg_28X,  500.01, 1000.00) ~ '0500-1000 metros',
between(cic_vg_28X, 1000.01, 1500.00) ~ '1000-1500 metros',
between(cic_vg_28X, 1500.01, 2000.00) ~ '1500-2000 metros',
between(cic_vg_28X, 2000.01, 2650.00) ~ '2000-2650 metros',
TRUE ~ NA)) %>%
group_by(uso_medio_fx) %>%
tally() %>%
mutate(perc_tot = n / sum(n) * 100) %>%
arrange(desc(uso_medio_fx))
1681/7469
1681/7469*100
# % de uso da rede cicloviária frente ao total
hexagonos %>%
st_drop_geometry() %>%
filter(estudantes_totais > 0) %>%
filter(hexclas_24 != 'hex origem impossivel' & hexclas_24 != 'viagens fora do tempo') %>%
select(id_hex, cic_perc_24) %>%
mutate(perc_uso_ciclo_fx = case_when(between(cic_perc_24,  0.00,  20.00001) ~ '00-20%',
between(cic_perc_24, 20.000011,  40.00001) ~ '20-40%',
between(cic_perc_24, 40.000011,  60.00001) ~ '40-60%',
between(cic_perc_24, 60.000011,  80.00001) ~ '60-80%',
between(cic_perc_24, 80.000011, 100.00001) ~ '80-100%',
TRUE ~ NA)) %>%
group_by(perc_uso_ciclo_fx) %>%
tally() %>%
mutate(perc_tot = n / sum(n) * 100) %>%
arrange(desc(perc_uso_ciclo_fx))
# % de uso da rede cicloviária frente ao total
hexagonos %>%
st_drop_geometry() %>%
# filter(estudantes_totais > 0 & hexclas_24 != 'hex origem impossivel') %>%
filter(estudantes_totais > 0) %>%
filter(hexclas_28X != 'hex origem impossivel' & hexclas_28X != 'viagens fora do tempo') %>%
select(id_hex, cic_perc_28X, hexclas_28X) %>%
# Incluindo os decimais longos para classificar números redondos (ex. 60.00),
# que não estão sendo pegos pelo between(), embora deveriam
mutate(perc_uso_ciclo_fx = case_when(between(cic_perc_28X,  0.00,  20.00001) ~ '00-20%',
between(cic_perc_28X, 20.000011,  40.00001) ~ '20-40%',
between(cic_perc_28X, 40.000011,  60.00001) ~ '40-60%',
between(cic_perc_28X, 60.000011,  80.00001) ~ '60-80%',
between(cic_perc_28X, 80.000011, 100.00001) ~ '80-100%',
TRUE ~ NA)) %>%
# filter(is.na(perc_uso_ciclo_fx) & hexclas_28X != 'hex origem impossivel')
group_by(perc_uso_ciclo_fx) %>%
tally() %>%
mutate(perc_tot = n / sum(n) * 100)  %>%
arrange(desc(perc_uso_ciclo_fx))
2588/7469
hexagonos %>%
st_drop_geometry() %>%
filter(estudantes_totais > 0) %>%
filter(estudantes_totais > 0 & vgs_ok_24 > 0) %>%
select(id_hex, vgs_tot_24, vgs_ok_24,
ext_tot_24, ext_cic_24, cic_vg_24, cic_perc_24,
ext_tot_28X, ext_cic_28X, cic_vg_28X, cic_perc_28X)
hexagonos %>%
st_drop_geometry() %>%
filter(estudantes_totais > 0) %>%
filter(hexclas_24 != 'hex origem impossivel' & hexclas_24 != 'viagens fora do tempo') %>%
select(id_hex, cic_perc_24) %>%
mutate(perc_uso_ciclo_fx = case_when(between(cic_perc_24,  0.00,  20.00001) ~ '00-20%',
between(cic_perc_24, 20.000011,  40.00001) ~ '20-40%',
between(cic_perc_24, 40.000011,  60.00001) ~ '40-60%',
between(cic_perc_24, 60.000011,  80.00001) ~ '60-80%',
between(cic_perc_24, 80.000011, 100.00001) ~ '80-100%',
TRUE ~ NA)) %>%
mutate(ext_viagens = ext_tot_24 / vgs_ok_24) %>%
filter(ext_viagens > 500) %>%
group_by(perc_uso_ciclo_fx) %>%
tally() %>%
mutate(perc_tot = n / sum(n) * 100) %>%
arrange(desc(perc_uso_ciclo_fx))
hexagonos %>%
st_drop_geometry() %>%
filter(estudantes_totais > 0) %>%
filter(hexclas_24 != 'hex origem impossivel' & hexclas_24 != 'viagens fora do tempo') %>%
mutate(ext_viagens = ext_tot_24 / vgs_ok_24) %>%
filter(ext_viagens > 500) %>%
select(id_hex, cic_perc_24) %>%
mutate(perc_uso_ciclo_fx = case_when(between(cic_perc_24,  0.00,  20.00001) ~ '00-20%',
between(cic_perc_24, 20.000011,  40.00001) ~ '20-40%',
between(cic_perc_24, 40.000011,  60.00001) ~ '40-60%',
between(cic_perc_24, 60.000011,  80.00001) ~ '60-80%',
between(cic_perc_24, 80.000011, 100.00001) ~ '80-100%',
TRUE ~ NA)) %>%
group_by(perc_uso_ciclo_fx) %>%
tally() %>%
mutate(perc_tot = n / sum(n) * 100) %>%
arrange(desc(perc_uso_ciclo_fx))
# % de uso da rede cicloviária frente ao total (pares OD distantes pelo menos 500 m)
hexagonos %>%
st_drop_geometry() %>%
# filter(estudantes_totais > 0 & hexclas_24 != 'hex origem impossivel') %>%
filter(estudantes_totais > 0) %>%
filter(hexclas_28X != 'hex origem impossivel' & hexclas_28X != 'viagens fora do tempo') %>%
mutate(ext_viagens = ext_tot_28x / vgs_ok_28X) %>%
filter(ext_viagens > 500) %>%
select(id_hex, cic_perc_28X, hexclas_28X) %>%
# Incluindo os decimais longos para classificar números redondos (ex. 60.00),
# que não estão sendo pegos pelo between(), embora deveriam
mutate(perc_uso_ciclo_fx = case_when(between(cic_perc_28X,  0.00,  20.00001) ~ '00-20%',
between(cic_perc_28X, 20.000011,  40.00001) ~ '20-40%',
between(cic_perc_28X, 40.000011,  60.00001) ~ '40-60%',
between(cic_perc_28X, 60.000011,  80.00001) ~ '60-80%',
between(cic_perc_28X, 80.000011, 100.00001) ~ '80-100%',
TRUE ~ NA)) %>%
# filter(is.na(perc_uso_ciclo_fx) & hexclas_28X != 'hex origem impossivel')
group_by(perc_uso_ciclo_fx) %>%
tally() %>%
mutate(perc_tot = n / sum(n) * 100)  %>%
arrange(desc(perc_uso_ciclo_fx))
# % de uso da rede cicloviária frente ao total (pares OD distantes pelo menos 500 m)
hexagonos %>%
st_drop_geometry() %>%
# filter(estudantes_totais > 0 & hexclas_24 != 'hex origem impossivel') %>%
filter(estudantes_totais > 0) %>%
filter(hexclas_28X != 'hex origem impossivel' & hexclas_28X != 'viagens fora do tempo') %>%
mutate(ext_viagens = ext_tot_28X / vgs_ok_28X) %>%
filter(ext_viagens > 500) %>%
select(id_hex, cic_perc_28X, hexclas_28X) %>%
# Incluindo os decimais longos para classificar números redondos (ex. 60.00),
# que não estão sendo pegos pelo between(), embora deveriam
mutate(perc_uso_ciclo_fx = case_when(between(cic_perc_28X,  0.00,  20.00001) ~ '00-20%',
between(cic_perc_28X, 20.000011,  40.00001) ~ '20-40%',
between(cic_perc_28X, 40.000011,  60.00001) ~ '40-60%',
between(cic_perc_28X, 60.000011,  80.00001) ~ '60-80%',
between(cic_perc_28X, 80.000011, 100.00001) ~ '80-100%',
TRUE ~ NA)) %>%
# filter(is.na(perc_uso_ciclo_fx) & hexclas_28X != 'hex origem impossivel')
group_by(perc_uso_ciclo_fx) %>%
tally() %>%
mutate(perc_tot = n / sum(n) * 100)  %>%
arrange(desc(perc_uso_ciclo_fx))
hexagonos %>%
st_drop_geometry() %>%
filter(estudantes_totais > 0) %>%
filter(hexclas_24 != 'hex origem impossivel' & hexclas_24 != 'viagens fora do tempo') %>%
mutate(ext_viagens = ext_tot_24 / vgs_ok_24) %>%
# filter(ext_viagens > 500) %>%
select(ext_viagens, cic_perc_24) %>%
summary()
hexagonos %>%
st_drop_geometry() %>%
filter(estudantes_totais > 0) %>%
filter(hexclas_28X != 'hex origem impossivel' & hexclas_28X != 'viagens fora do tempo') %>%
mutate(ext_viagens = ext_tot_28X / vgs_ok_28X) %>%
# filter(ext_viagens > 500) %>%
select(ext_viagens, cic_perc_28X) %>%
summary()
